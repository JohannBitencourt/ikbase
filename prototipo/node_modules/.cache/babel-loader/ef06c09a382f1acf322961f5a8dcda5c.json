{"ast":null,"code":"import _defineProperty from \"/workspace/ikbase/prototipo/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/workspace/ikbase/prototipo/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nimport { FETCH_COMMENTS_COUNT, FETCH_COMMENTS, COMMENT_WAS_DELETED, VOTE_FOR_COMMENT, COMMENT_WAS_CREATED } from '../actions/types';\nvar INITIAL_STATE = {\n  commentCount: {}\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_COMMENTS_COUNT:\n      var _action$payload = action.payload,\n          id = _action$payload.id,\n          amount = _action$payload.amount;\n      return _objectSpread({}, state, {\n        commentCount: _objectSpread({}, state['commentCount'], _defineProperty({}, id, amount))\n      });\n\n    case FETCH_COMMENTS:\n      return _.mapKeys(action.payload, 'id');\n\n    case COMMENT_WAS_DELETED:\n      return _.omit(state, action.payload);\n\n    case VOTE_FOR_COMMENT:\n      return _objectSpread({}, state, _defineProperty({}, action.payload.id, action.payload));\n\n    case COMMENT_WAS_CREATED:\n      return _objectSpread({}, state, _defineProperty({}, action.payload.id, action.payload));\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/workspace/ikbase/prototipo/src/reducers/comments.js"],"names":["_","FETCH_COMMENTS_COUNT","FETCH_COMMENTS","COMMENT_WAS_DELETED","VOTE_FOR_COMMENT","COMMENT_WAS_CREATED","INITIAL_STATE","commentCount","state","action","type","payload","id","amount","mapKeys","omit"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SACEC,oBADF,EAEEC,cAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,mBALF,QAMO,kBANP;AAQA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,YAAY,EAAE;AADM,CAAtB;AAIA,eAAe,YAAyC;AAAA,MAA/BC,KAA+B,uEAAvBF,aAAuB;AAAA,MAARG,MAAQ;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,oBAAL;AAAA,4BACyBQ,MAAM,CAACE,OADhC;AAAA,UACUC,EADV,mBACUA,EADV;AAAA,UACcC,MADd,mBACcA,MADd;AAEE,+BACKL,KADL;AAEED,QAAAA,YAAY,oBACPC,KAAK,CAAC,cAAD,CADE,sBAETI,EAFS,EAEJC,MAFI;AAFd;;AAOF,SAAKX,cAAL;AACE,aAAOF,CAAC,CAACc,OAAF,CAAUL,MAAM,CAACE,OAAjB,EAA0B,IAA1B,CAAP;;AACF,SAAKR,mBAAL;AACE,aAAOH,CAAC,CAACe,IAAF,CAAOP,KAAP,EAAcC,MAAM,CAACE,OAArB,CAAP;;AACF,SAAKP,gBAAL;AACE,+BACKI,KADL,sBAEGC,MAAM,CAACE,OAAP,CAAeC,EAFlB,EAEuBH,MAAM,CAACE,OAF9B;;AAIF,SAAKN,mBAAL;AACE,+BACKG,KADL,sBAEGC,MAAM,CAACE,OAAP,CAAeC,EAFlB,EAEuBH,MAAM,CAACE,OAF9B;;AAIF;AACA,aAAOH,KAAP;AAzBF;AA2BD","sourcesContent":["import _ from 'lodash'\nimport  {\n  FETCH_COMMENTS_COUNT,\n  FETCH_COMMENTS,\n  COMMENT_WAS_DELETED,\n  VOTE_FOR_COMMENT,\n  COMMENT_WAS_CREATED,\n} from '../actions/types'\n\nconst INITIAL_STATE = {\n  commentCount: {}\n};\n\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case FETCH_COMMENTS_COUNT:\n      const { id, amount } = action.payload;\n      return {\n        ...state,\n        commentCount: {\n          ...state['commentCount'],\n          [id]: amount\n        }\n      };\n    case FETCH_COMMENTS:\n      return _.mapKeys(action.payload, 'id');\n    case COMMENT_WAS_DELETED:\n      return _.omit(state, action.payload);\n    case VOTE_FOR_COMMENT:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      }\n    case COMMENT_WAS_CREATED:\n      return {\n        ...state,\n        [action.payload.id]: action.payload\n      }\n    default:\n    return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}